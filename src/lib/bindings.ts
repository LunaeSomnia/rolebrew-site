// This file has been generated by Specta. DO NOT EDIT.

export type Ancestry = { id: string; slug: string; name: string; description: string; additional_languages: AncestryAdditionalLanguages; boosts: JsonMap<Attribute[]>; flaws: JsonMap<Attribute[]>; voluntary: AncestryVoluntary | null; hp: number; languages: string[]; speed: number; size: Size; reach: number; vision: Vision; items: JsonMap<FeatureEntryData>; traits: Traits; rules: Rule[]; meta: ItemMeta }

export type AncestryAdditionalLanguages = { count: number; value: string[]; custom: string[] }

export type AncestryVoluntary = { boost: Attribute | null; flaws: Attribute[] }

export type AnyValue = string | number | boolean

export type Attribute = "str" | "dex" | "con" | "int" | "wis" | "cha"

export type Condition = { id: string; slug: string; name: string; active: boolean; removable: boolean; from_spell: boolean; expired: boolean; description: string; duration: Duration; group: ConditionGroup | null; rules: Rule[]; traits: Traits; overrides: string[]; references: ConditionReferences; value: number | null; meta: ItemMeta }

export type ConditionGroup = "Detection" | "Death" | "Abilities" | "Senses" | "Attitudes"

export type ConditionReferences = { immunity_from: string[]; children: string[]; overridden_by: string[]; overrides: string[] }

export type Damage = { damageType: string; dice: number; die: string }

export type Duration = { value: number; unit: DurationTime; expiry: EffectExpiryType | null; perpetual: boolean; text: string | null }

export type DurationTime = "unlimited" | "encounter" | "rounds" | "minutes" | "hours" | "days"

export type EffectExpiryType = "turn-start" | "turn-end" | "round-end"

export type FeatureEntryData = { uuid: string; img: string; name: string; level: number }

export type ItemMeta = { img: string; publication: Publication; item_type: string; migration: Migration | null; stats: Stats | null; effects: string[] }

export type JsonMap<V> = { [key in string]: V }

export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }

export type License = "ORC" | "OGL" | "CUP"

export type Migration = { version: number; previous: string | null }

export type OneOrMany<T> = T | T[]

export type Publication = { license: License; remaster: boolean; title: string }

export type Rarity = "common" | "uncommon" | "rare" | "unique"

export type Rule = { key: "FlatModifier"; selector: string | null; slug: string; type: string | null; value: JsonValue | null } | { key: "LoseHitPoints"; reevaluateOnUpdate: boolean; value: JsonValue | null } | { key: "ActiveEffectLike"; mode: string; path: string; value: JsonValue | null; priority: number | null } | { key: "GrantItem"; uuid: string; inMemoryOnly?: boolean; allowDuplicate?: boolean; onDeleteActions: RuleAction | null } | { key: "Immunity"; type: string } | { key: "RollOption"; alwaysActive?: boolean; mergeable?: boolean; toggleable?: boolean; label: string | null; option: string; predicate: RulePredicate | null; suboptions: RulePredicate | null; domain: string | null; value: JsonValue | null } | { key: "ItemAlteration"; itemType: string; mode: string; predicate: OneOrMany<RulePredicate>; property: string; value: JsonValue | null } | { key: "BaseSpeed"; selector: string; value: JsonValue | null; predicate: RulePredicate | null } | { key: "ChoiceSet"; prompt: string; flag: string; adjustName: boolean; choices: OneOrMany<RulePredicate> } | { key: "CreatureSize"; value: string; size: string | null; slug: string | null; speed: number | null } | { key: "Strike"; baseType: string | null; category: string; damage: StrikeDamage; group: string; img: string; label: string; predicate: RulePredicate | null; traits: string[] }

export type RuleAction = { grantee: string | null; granter: string | null }

export type RulePredicate = AnyValue | RulePredicateFilter | RulePredicate[] | RulePredicateFilter[] | { label: string; value?: JsonValue | null }

export type RulePredicateFilter = { or: OneOrMany<RulePredicate> } | { nor: OneOrMany<RulePredicate> } | { and: OneOrMany<RulePredicate> } | { nand: OneOrMany<RulePredicate> } | { not: OneOrMany<RulePredicate> } | { gt: OneOrMany<RulePredicate> } | { lt: OneOrMany<RulePredicate> } | { gte: OneOrMany<RulePredicate> } | { lte: OneOrMany<RulePredicate> }

export type Size = "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan"

export type Stats = { core_version: string; system_id: string; system_version: string; compendium_source: string }

export type StrikeDamage = { base: Damage }

export type Summary = { id: string; slug: string; name: string; description: string; url: string }

export type Traits = { value: string[]; rarity: Rarity | null; other_tags: string[] }

export type Vision = "normal" | "darkvision" | "low-light-vision"

